Server Folder Structure

Since Express will be strictly for handling all communication with the database,
we want to structure our project based on our models. Here's what our folder structure will look like:

server(root folder) =>
config - will handle the database configuration and connection
controllers - will hold all logic for each model (i.e creating, updating, etc...)
models - will hold all the schemas
routes - will handle all of our routes for each model
server.js - will handle all the server logic with express

Modules
The ability to include code from other files within another file is extremely important in a back-end environment. If you recall, we do this with front-end JavaScript by adding script tags with the src attribute pointing to the right place. But in NodeJS, we need to be able to pull code from JavaScript files into other JavaScript files so a simple script tag will not do any good for us.

To do this, we can use Javascript's built-in tools to import and export between files:

require("./filePathGoesHere") - used to import from different files
module.exports = WhateverYouNeedToExportGoesHere - used to export whatever content you need to export from that file

Exporting in Node

There are multiple ways we can export code using module.exports.
Here are a couple of ways we can export multiple functions using an object:

---

module.exports.greet = function() {
console.log("Hello! We are exporting a function called Greet.");
};

module.exports.add = function(num1, num2) {
console.log("The sum is: ", num1 + num2);
};

---

module.exports = {
greet: function() {
console.log("Hello! We are exporting a function called Greet.");
},
add: function(num1, num2) {
console.log("The sum is: ", num1 + num2);
}
}

---

Both of these export methods are exporting the same function just in a different way.
The syntax in which you choose to export is your choice.

Importing in Node
There are also multiple ways we can Import our functions:

## Save our exports in a variable

const myCustomModule = require("./my_module");
myCustomModule.greet();
myCustomModule.add(5, 7);

---

## Or we can use destructuring:

const { greet, add } require("./my_module");
greet();
add(5, 7);

---

IMPORTANT NOTES:
You'll notice that we require the string "./my_module". There are 2 things to note here:

There is no .js at the end of the file. The require method automatically looks for JavaScript files, so we don't need to include the .js file extension.
The files app.js and my_module.js are in the same directory. Normally, the require() method looks for node modules that aren't in the same directory as the file that is running; by default, the require() method looks for the modules located in a folder called node_modules. To tell require() to look in the current directory (i.e. the folder that the file is located in) we have to include "./" in front of the file path. "./" (dot-slash) is the file path for the current directory
